{"version":3,"file":"static/js/940.d8e89a45.chunk.js","mappings":"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","sources":["components/ide/mockData/index.js"],"sourcesContent":["// ==============================================\n// 📄 src/components/ide/mockData/index.js\n// ==============================================\n\n/**\n * 🗂️ JSON 기반 Mock 데이터 매니저\n */\n\n// JSON 파일들 직접 import (DV-Flow v1.3 스키마)\nimport bubbleSortJson from './bubbleSort.json';\nimport graphJson from './graph.json';\n\n// JSON 예제 파일들을 객체 형태로 export\nexport const jsonExamples = [\n    {\n        name: 'bubbleSort.json',\n        type: 'json',\n        code: JSON.stringify(bubbleSortJson, null, 2)\n    },\n    {\n        name: 'graph.json',\n        type: 'json',\n        code: JSON.stringify(graphJson, null, 2)\n    }\n];\n\n// JSON 데이터 객체 매핑 (파일명 -> 원본 JSON 데이터)\nconst jsonDataMap = {\n    bubbleSort: bubbleSortJson,\n    graph: graphJson\n};\n\n// JSON 파일들을 동적으로 import하는 함수 (호환성 유지)\nconst importJsonFile = async (filename) => {\n    try {\n        // 캐시된 데이터에서 찾기\n        const jsonData = jsonDataMap[filename];\n        if (jsonData) {\n            return jsonData;\n        }\n        console.warn(`⚠️ JSON 파일을 찾을 수 없습니다: ${filename}.json`);\n        return null;\n    } catch (error) {\n        console.warn(`⚠️ JSON 파일 로드 실패: ${filename}.json`, error);\n        return null;\n    }\n};\n\nexport class JsonVisualizationManager {\n    // 📋 현재 사용 가능한 JSON 파일들 (확장자 제외)\n    static availableJsonFiles = ['bubbleSort', 'graph'];\n\n    // 🗄️ 로드된 JSON 데이터 캐시\n    static jsonCache = new Map();\n\n    /**\n     * 🔍 코드 패턴으로 적절한 JSON 데이터 찾기\n     * @param {string} code - 분석할 코드\n     * @param {string} language - 프로그래밍 언어\n     * @param {string} input - 입력값\n     * @returns {Promise<object|null>} JSON 시각화 데이터\n     */\n    static async getJsonDataByPattern(code, language, input) {\n        if (!code?.trim()) {\n            console.warn('⚠️ 빈 코드 입력');\n            return null;\n        }\n\n        const codeContent = code.toLowerCase();\n\n        // 🔍 패턴 매칭으로 적절한 JSON 파일 찾기\n        const patterns = {\n            bubbleSort: ['bubble', '버블', 'sort'],\n            graph: ['graph', '그래프', 'adj', 'adjacency']\n        };\n\n        // 패턴 매칭 시도\n        for (const [jsonFile, keywords] of Object.entries(patterns)) {\n            const isMatched = keywords.some(keyword =>\n                codeContent.includes(keyword.toLowerCase())\n            );\n\n            if (isMatched) {\n                console.log(`✅ 패턴 매칭 성공: ${jsonFile} (키워드: ${keywords.join(', ')})`);\n                return await this.loadJsonData(jsonFile, input);\n            }\n        }\n\n        // 🔄 매칭되는 패턴이 없으면 기본 데이터 반환\n        console.log('🔄 기본 변수 추적 모드');\n        return this.createDefaultData(code, language, input);\n    }\n\n    /**\n     * 📂 특정 JSON 파일 직접 로드\n     * @param {string} jsonFileName - JSON 파일명 (확장자 제외)\n     * @param {string} input - 입력값 (옵션)\n     * @returns {Promise<object|null>} JSON 데이터\n     */\n    static async loadJsonData(jsonFileName, input = null) {\n        // 🗄️ 캐시 확인\n        if (this.jsonCache.has(jsonFileName)) {\n            console.log(`🗄️ 캐시에서 JSON 로드: ${jsonFileName}`);\n            const cachedData = this.jsonCache.get(jsonFileName);\n            return this.updateDataWithInput(cachedData, input);\n        }\n\n        try {\n            // 📂 JSON 파일 동적 import\n            console.log(`📂 JSON 파일 로딩: ${jsonFileName}.json`);\n            const jsonData = await importJsonFile(jsonFileName);\n\n            if (!jsonData) {\n                throw new Error(`JSON 파일을 찾을 수 없습니다: ${jsonFileName}.json`);\n            }\n\n            // 🗄️ 캐시에 저장\n            this.jsonCache.set(jsonFileName, jsonData);\n\n            console.log(`✅ JSON 로드 완료: ${jsonFileName}`, {\n                eventsCount: jsonData.events?.length,\n                lang: jsonData.lang\n            });\n\n            // 입력값으로 데이터 업데이트\n            return this.updateDataWithInput(jsonData, input);\n\n        } catch (error) {\n            console.error(`❌ JSON 로드 실패: ${jsonFileName}`, error);\n            return null;\n        }\n    }\n\n    /**\n     * 🔧 입력값으로 JSON 데이터 업데이트\n     * @param {object} jsonData - 원본 JSON 데이터\n     * @param {string} input - 입력값\n     * @returns {object} 업데이트된 데이터\n     */\n    static updateDataWithInput(jsonData, input) {\n        if (!input || !jsonData) return jsonData;\n\n        // 깊은 복사로 원본 데이터 보호\n        const updatedData = JSON.parse(JSON.stringify(jsonData));\n\n        // DV-Flow 스키마에서는 input 문자열만 갱신\n        updatedData.input = input;\n\n        return updatedData;\n    }\n\n    /**\n     * 📝 기본 데이터 생성 (패턴 매칭 실패 시)\n     */\n    static createDefaultData(code, language, input) {\n        // DV-Flow 스키마에 맞춘 최소 예제\n        return {\n            lang: language || 'c',\n            input: input || '',\n            analysis: {\n                timeComplexity: 'O(1)',\n                spaceComplexity: 'O(1)'\n            },\n            events: [\n                {\n                    t: 1,\n                    kind: 'note',\n                    loc: { line: 1 },\n                    text: '프로그램 시작'\n                },\n                {\n                    t: 2,\n                    kind: 'io',\n                    loc: { line: 2 },\n                    dir: 'out',\n                    channel: 'stdout',\n                    data: input ? `입력: ${input}\\n` : '입력 없음\\n'\n                },\n                {\n                    t: 3,\n                    kind: 'note',\n                    loc: { line: 3 },\n                    text: '프로그램 종료'\n                }\n            ]\n        };\n    }\n\n    /**\n     * 📋 사용 가능한 JSON 파일 목록\n     */\n    static getAvailableJsonFiles() {\n        return [...this.availableJsonFiles];\n    }\n\n    /**\n     * 🗄️ 캐시 상태 확인\n     */\n    static getCacheInfo() {\n        return {\n            cacheSize: this.jsonCache.size,\n            cachedFiles: Array.from(this.jsonCache.keys()),\n            availableFiles: this.availableJsonFiles\n        };\n    }\n\n    /**\n     * 🧹 캐시 초기화\n     */\n    static clearCache() {\n        this.jsonCache.clear();\n        console.log('🧹 JSON 캐시 초기화됨');\n    }\n}\n\n// ==============================================\n// 🔧 편의 함수들 export\n// ==============================================\n\nexport const getJsonVisualizationData = (code, language, input) =>\n    JsonVisualizationManager.getJsonDataByPattern(code, language, input);\n\nexport const loadSpecificJsonData = (jsonFileName, input) =>\n    JsonVisualizationManager.loadJsonData(jsonFileName, input);\n\nexport const getAvailableJsonFiles = () =>\n    JsonVisualizationManager.getAvailableJsonFiles();\n\nexport const getJsonCacheInfo = () =>\n    JsonVisualizationManager.getCacheInfo();\n\nexport const clearJsonCache = () =>\n    JsonVisualizationManager.clearCache();\n\n// 기본 export\nexport default JsonVisualizationManager;\n\n// 🚀 초기화 로그\nconsole.log('🗂️ JSON 시각화 매니저 로드 완료');\nconsole.log('📋 사용 가능한 JSON 파일들:', JsonVisualizationManager.getAvailableJsonFiles());"],"names":["jsonDataMap","JSON","stringify","bubbleSortJson","graphJson","bubbleSort","graph","JsonVisualizationManager","getJsonDataByPattern","code","language","input","trim","console","warn","codeContent","toLowerCase","patterns","jsonFile","keywords","Object","entries","some","keyword","includes","log","join","this","loadJsonData","createDefaultData","jsonFileName","arguments","length","undefined","jsonCache","has","cachedData","get","updateDataWithInput","_jsonData$events","jsonData","async","filename","error","importJsonFile","Error","set","eventsCount","events","lang","updatedData","parse","analysis","timeComplexity","spaceComplexity","t","kind","loc","line","text","dir","channel","data","getAvailableJsonFiles","availableJsonFiles","getCacheInfo","cacheSize","size","cachedFiles","Array","from","keys","availableFiles","clearCache","clear","Map","getJsonVisualizationData"],"sourceRoot":""}