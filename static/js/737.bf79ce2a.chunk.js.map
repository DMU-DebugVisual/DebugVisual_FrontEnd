{"version":3,"file":"static/js/737.bf79ce2a.chunk.js","mappings":"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","sources":["components/ide/mockData|lazy|/^/.//.*/.json$/|groupOptions: {}|namespace object","components/ide/mockData/index.js"],"sourcesContent":["var map = {\n\t\"./binaryTree.json\": [\n\t\t4951,\n\t\t951\n\t],\n\t\"./bubbleSort.json\": [\n\t\t7592,\n\t\t592\n\t],\n\t\"./fibonacci.json\": [\n\t\t206,\n\t\t206\n\t],\n\t\"./graph.json\": [\n\t\t1534,\n\t\t534\n\t],\n\t\"./heap.json\": [\n\t\t1352,\n\t\t352\n\t],\n\t\"./linkedList.json\": [\n\t\t19,\n\t\t19\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 3 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 2599;\nmodule.exports = webpackAsyncContext;","// ==============================================\n// 📄 src/components/ide/mockData/index.js\n// ==============================================\n\n/**\n * 🗂️ JSON 기반 Mock 데이터 매니저\n */\n\n// JSON 파일들을 동적으로 import하는 함수\nconst importJsonFile = async (filename) => {\n    try {\n        // 동적 import로 JSON 파일 로드\n        const module = await import(`./${filename}.json`);\n        return module.default;\n    } catch (error) {\n        console.warn(`⚠️ JSON 파일 로드 실패: ${filename}.json`, error);\n        return null;\n    }\n};\n\nexport class JsonVisualizationManager {\n    // 📋 현재 사용 가능한 JSON 파일들 (확장자 제외)\n    static availableJsonFiles = [\n        'bubbleSort',\n        'fibonacci',\n        'linkedList',\n        'binaryTree',\n        'heap',\n        'graph'\n    ];\n\n    // 🗄️ 로드된 JSON 데이터 캐시\n    static jsonCache = new Map();\n\n    /**\n     * 🔍 코드 패턴으로 적절한 JSON 데이터 찾기\n     * @param {string} code - 분석할 코드\n     * @param {string} language - 프로그래밍 언어\n     * @param {string} input - 입력값\n     * @returns {Promise<object|null>} JSON 시각화 데이터\n     */\n    static async getJsonDataByPattern(code, language, input) {\n        if (!code?.trim()) {\n            console.warn('⚠️ 빈 코드 입력');\n            return null;\n        }\n\n        const codeContent = code.toLowerCase();\n\n        // 🔍 패턴 매칭으로 적절한 JSON 파일 찾기\n        const patterns = {\n            'bubbleSort': ['bubble', '버블', 'sort'],\n            'fibonacci': ['fibo', '피보나치', 'recursion'],\n            'linkedList': ['linked', 'list', '연결', '노드', 'node'],\n            'binaryTree': ['binary', 'tree', '이진', '트리', 'bst'],\n            'heap': ['heap', '힙', 'priority'],\n            'graph': ['graph', '그래프', 'adj', 'adjacency']\n        };\n\n        // 패턴 매칭 시도\n        for (const [jsonFile, keywords] of Object.entries(patterns)) {\n            const isMatched = keywords.some(keyword =>\n                codeContent.includes(keyword.toLowerCase())\n            );\n\n            if (isMatched) {\n                console.log(`✅ 패턴 매칭 성공: ${jsonFile} (키워드: ${keywords.join(', ')})`);\n                return await this.loadJsonData(jsonFile, input);\n            }\n        }\n\n        // 🔄 매칭되는 패턴이 없으면 기본 데이터 반환\n        console.log('🔄 기본 변수 추적 모드');\n        return this.createDefaultData(code, language, input);\n    }\n\n    /**\n     * 📂 특정 JSON 파일 직접 로드\n     * @param {string} jsonFileName - JSON 파일명 (확장자 제외)\n     * @param {string} input - 입력값 (옵션)\n     * @returns {Promise<object|null>} JSON 데이터\n     */\n    static async loadJsonData(jsonFileName, input = null) {\n        // 🗄️ 캐시 확인\n        if (this.jsonCache.has(jsonFileName)) {\n            console.log(`🗄️ 캐시에서 JSON 로드: ${jsonFileName}`);\n            const cachedData = this.jsonCache.get(jsonFileName);\n            return this.updateDataWithInput(cachedData, input);\n        }\n\n        try {\n            // 📂 JSON 파일 동적 import\n            console.log(`📂 JSON 파일 로딩: ${jsonFileName}.json`);\n            const jsonData = await importJsonFile(jsonFileName);\n\n            if (!jsonData) {\n                throw new Error(`JSON 파일을 찾을 수 없습니다: ${jsonFileName}.json`);\n            }\n\n            // 🗄️ 캐시에 저장\n            this.jsonCache.set(jsonFileName, jsonData);\n\n            console.log(`✅ JSON 로드 완료: ${jsonFileName}`, {\n                algorithm: jsonData.algorithm,\n                stepsCount: jsonData.steps?.length,\n                variablesCount: jsonData.variables?.length\n            });\n\n            // 입력값으로 데이터 업데이트\n            return this.updateDataWithInput(jsonData, input);\n\n        } catch (error) {\n            console.error(`❌ JSON 로드 실패: ${jsonFileName}`, error);\n            return null;\n        }\n    }\n\n    /**\n     * 🔧 입력값으로 JSON 데이터 업데이트\n     * @param {object} jsonData - 원본 JSON 데이터\n     * @param {string} input - 입력값\n     * @returns {object} 업데이트된 데이터\n     */\n    static updateDataWithInput(jsonData, input) {\n        if (!input || !jsonData) return jsonData;\n\n        // 깊은 복사로 원본 데이터 보호\n        const updatedData = JSON.parse(JSON.stringify(jsonData));\n\n        // 입력값 업데이트\n        updatedData.input = input;\n\n        // 입력값에 따른 변수 업데이트 (기본적인 처리)\n        const inputNumber = parseInt(input);\n        if (!isNaN(inputNumber)) {\n            updatedData.variables?.forEach(variable => {\n                if (variable.name === 'n' && variable.type === 'int') {\n                    variable.currentValue = inputNumber;\n                }\n            });\n        }\n\n        return updatedData;\n    }\n\n    /**\n     * 📝 기본 데이터 생성 (패턴 매칭 실패 시)\n     */\n    static createDefaultData(code, language, input) {\n        return {\n            algorithm: 'variables',\n            lang: language || 'c',\n            input: input || '',\n            variables: [\n                { name: \"n\", type: \"int\", initialValue: null, currentValue: parseInt(input) || 5 },\n                { name: \"i\", type: \"int\", initialValue: null, currentValue: 1 },\n                { name: \"result\", type: \"int\", initialValue: null, currentValue: 0 }\n            ],\n            functions: [],\n            steps: [\n                { line: 1, description: \"프로그램 시작\" },\n                { line: 2, description: \"변수 선언 및 초기화\" },\n                { line: 3, description: \"계산 수행\" },\n                { line: 4, description: \"결과 출력\" },\n                { line: 5, description: \"프로그램 종료\" }\n            ]\n        };\n    }\n\n    /**\n     * 📋 사용 가능한 JSON 파일 목록\n     */\n    static getAvailableJsonFiles() {\n        return [...this.availableJsonFiles];\n    }\n\n    /**\n     * 🗄️ 캐시 상태 확인\n     */\n    static getCacheInfo() {\n        return {\n            cacheSize: this.jsonCache.size,\n            cachedFiles: Array.from(this.jsonCache.keys()),\n            availableFiles: this.availableJsonFiles\n        };\n    }\n\n    /**\n     * 🧹 캐시 초기화\n     */\n    static clearCache() {\n        this.jsonCache.clear();\n        console.log('🧹 JSON 캐시 초기화됨');\n    }\n}\n\n// ==============================================\n// 🔧 편의 함수들 export\n// ==============================================\n\nexport const getJsonVisualizationData = (code, language, input) =>\n    JsonVisualizationManager.getJsonDataByPattern(code, language, input);\n\nexport const loadSpecificJsonData = (jsonFileName, input) =>\n    JsonVisualizationManager.loadJsonData(jsonFileName, input);\n\nexport const getAvailableJsonFiles = () =>\n    JsonVisualizationManager.getAvailableJsonFiles();\n\nexport const getJsonCacheInfo = () =>\n    JsonVisualizationManager.getCacheInfo();\n\nexport const clearJsonCache = () =>\n    JsonVisualizationManager.clearCache();\n\n// 기본 export\nexport default JsonVisualizationManager;\n\n// 🚀 초기화 로그\nconsole.log('🗂️ JSON 시각화 매니저 로드 완료');\nconsole.log('📋 사용 가능한 JSON 파일들:', JsonVisualizationManager.getAvailableJsonFiles());"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","JsonVisualizationManager","getJsonDataByPattern","language","input","trim","console","warn","codeContent","toLowerCase","patterns","jsonFile","keywords","entries","some","keyword","includes","log","join","this","loadJsonData","createDefaultData","jsonFileName","arguments","length","undefined","jsonCache","has","cachedData","get","updateDataWithInput","_jsonData$steps","_jsonData$variables","jsonData","async","filename","default","error","importJsonFile","set","algorithm","stepsCount","steps","variablesCount","variables","updatedData","JSON","parse","stringify","inputNumber","parseInt","_updatedData$variable","isNaN","forEach","variable","name","type","currentValue","lang","initialValue","functions","line","description","getAvailableJsonFiles","availableJsonFiles","getCacheInfo","cacheSize","size","cachedFiles","Array","from","availableFiles","clearCache","clear","Map","getJsonVisualizationData"],"sourceRoot":""}